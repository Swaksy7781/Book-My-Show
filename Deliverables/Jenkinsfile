pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        
        DOCKERHUB_USERNAME = 'swaksy7781'
        IMAGE_NAME = "bms"
        IMAGE_TAG = "latest"
        FULL_IMAGE_NAME = "${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
        SCANNER_HOME = tool 'sonar-scanner'
        REPO_URL = 'https://github.com/Swaksy7781/Book-My-Show.git'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
                sh 'ls -la' // Verify files after checkout
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('sonar-server') {
                        sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=Book-my-Show -Dsonar.projectKey=BMS"
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'saurabh-sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('bookmyshow-app') {
                    sh 'rm -rf node_modules package-lock.json' // Remove old dependencies
                    sh 'npm install' // Install fresh dependencies
                }
            }
        }
        stage('Docker Build & Push') {
            steps {
                withDockerRegistry(credentialsId: 'saurabh-docker-token', toolName: 'docker') {
                    sh "docker build --no-cache -t ${FULL_IMAGE_NAME} -f bookmyshow-app/Dockerfile bookmyshow-app"
                    sh "docker push ${FULL_IMAGE_NAME}"
                }
            }
        }
    }
    post {
        always {
            emailext(
                attachLog: true,
                from: 'wakasesaurabh@gmail.com',      
                subject: "[${currentBuild.result}] - Book-my-Show CI/CD Pipeline #${env.BUILD_NUMBER}",
                body: """
                    <html>
                    <body>
                        <h2>Build Notification</h2>
                        <p><b>Project:</b> ${env.JOB_NAME}</p>
                        <p><b>Build Number:</b> ${env.BUILD_NUMBER}</p>
                        <p><b>Status:</b> ${currentBuild.result}</p>
                        <p><b>Triggered by:</b> ${currentBuild.getBuildCauses()[0].shortDescription}</p>
                        <p><b>URL:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        <hr>
                        <p>This is an automated email from Jenkins.</p>
                    </body>
                    </html>
                """,
                to: 'wakasesaurabh@gmail.com',
                mimeType: 'text/html'
            )
        }
    }

}
